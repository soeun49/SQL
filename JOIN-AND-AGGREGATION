--JOIN
--1. SIMPLE JOIN
--1) employees 테이블과 departments 테이블을 확인 
DESC employees;
DESC departments;
--2) 두 테이블로부터 필드의 갯수를 확인 
SELECT * FROM employees;  -- 107개
SELECT * FROM departments; --27개
--3) 두 테이블의 정보를 추출
SELECT first_name, department_name FROM employees, departments; -- 107*27 =2889개 
-- 두 테이블의 조합 가능한 모든 쌍이 출력 
-- 카티션 프로덕트 (CP) or cross join
-- 일반적으로 원하지 않는 결과...가 출력 
--DESHALB, 두 테이블의 연결 조건으로 WHERE에 부여 -> SIMPLE JOIN(!)
SELECT * 
FROM employees, departments 
WHERE employees.department_id = departments.department_id;-- 106개 (Missing one) 

--필드의 모호성을 해소하기 위해, 테이블 명 혹은 alias 를 부여
SELECT first_name,  emp.department_id, dept.department_name
FROM employees emp, departments dept
WHERE emp.department_id = dept.department_id;


--2.EQUI-JOIN (USING (...)) = NATURAL JOIN
--WHERE 절에 기술하는 조인 조건이 됨 
--연습문제 
--employees와 departments를 department_id로 조인하여 first_name, department_id, departmnent_name출력
--(+)department_null인 사원 찾기 
SELECT emp.first_name, dept.department_name
FROM employees emp JOIN departments dept USING (department_id);

SELECT first_name, department_name
FROM employees emp JOIN departments dept 
                    ON emp.department_id=dept.department_id; --ON은 JOIN의 조건 명시할 때 사용 

SELECT first_name, department_name 
FROM employees NATURAL JOIN departments;-- NATURAL JOIN: 같은 이름을 가진 컬럼을 기준으로 JOIN


--3.THETA JOIN = NON-EQUI JOIN
--특정 조건을 기준으로 JOIN을 하되, 조건이 =이 아닌 경우
SELECT * FROM jobs WHERE job_id = 'FI_MGR';

SELECT first_name, salary FROM employees emp, jobs j
WHERE j.job_id='FI_MGR' AND salary BETWEEN j.min_salary and j.max_salary;


--4.INNER JOIN 
SELECT first_name, emp.department_id, dept.department_id, department_name
FROM employees emp, departments dept
WHERE emp.department_id=dept.department_id; --106명

--전체 사원수 
SELECT COUNT(*) FROM employees; --107명의 사원 
--부서 id가 null인 사원 찾기
SELECT first_name, department_id
FROM employees WHERE department_id IS NULL;


--5.OUTER JOIN 
--조건이 만족하는 짝이 없는 레코드도 null을 포함하여 결과를 출력 
--모든 레코드를 출력할 테이블이 어느 위치에 있는가에 따라서 LEFT,RIGHT, FULL 로 나뉨 
--ORACLE SQL의 경우, NULL이 출력될 수 있는 쪽 조건에 (+)를 붙인다

--LEFT OUTER JOIN: 짝이 없어도 왼쪽의 테이블 전체를 출력에 참여 
--ORACLE SQL
SELECT first_name, emp.department_id, dept.department_id, department_name
FROM employees emp, departments dept 
WHERE emp.department_id  = dept.department_id(+);
--ANSI SQL (LEFT OUTER JOIN ~ON)
SELECT first_name, emp.department_id, dept.department_id, department_name
FROM employees emp LEFT OUTER JOIN departments dept 
                            ON emp.department_id = dept.department_id;
                            
--RIGHT OUTER JOIN: 짝이 없어도 오른쪽의 테이블 전체를 출력에 참여 
--ORACLE SQL 
SELECT first_name, emp.department_id, dept.department_id, department_name
FROM employees emp, departments dept
WHERE emp.department_id(+) = dept.department_id;
--ANSI SQL (RIGHT OUTER JOIN ~ON)
SELECT first_name, emp.department_id, dept.department_id, department_name
FROM employees emp RIGHT OUTER JOIN departments dept
                         ON emp.department_id=dept.department_id;

--FULL OUTER JOIN: 양 쪽 테이블 모두 짝이 없어도 출력에 참여
--ORACLE SQL은 LEFT(RIGHT) OUTER JOIN만 가능함 
--deshalb ERROR:
--SELECT first_name, emp.department_id, dept.department_id, department_name
--FROM employees emp, departments dept WHERE emp.department_id(+) =dept.department_id(+);

--ANSI SQL만 적용 가능 
SELECT first_name, emp.department_id, dept.department_id, department_name
FROM employees emp FULL OUTER JOIN departments dept
                    ON emp.department_id= dept.department_id;
                    
                    
--cf. n개의 테이블을 JOIN(!)
--부서 id, 부서명, 해당 부서가 위치한 city, country_name를 결합한 테이블을 출력해보자!
SELECT department_id, dept.department_name, loc.city, c.country_name
FROM departments dept, locations loc JOIN countries c
                                ON loc.country_id= c.country_id
WHERE dept.location_id= loc.location_id
ORDER BY dept.department_id ASC;
--OR 
SELECT department_id, department_name, city, country_name
FROM departments dept, locations loc, countries c 
WHERE dept.location_id=loc.location_id AND loc.country_id=c.country_id
ORDER BY dept.department_id ASC;


--SELF JOIN
--자기 자신과 JOIN
--한개의 테이블을 두 번이상 사용하므로 반드시 alias 사용필수!
--연습문제 
--employee_id, first_name, manager의 employee_id, manger의 first_name을 출력
SELECT * FROM employees; --107명 
SELECT a.employee_id, a.first_name, a.manager_id, b.first_name
FROM employees a JOIN employees b
                    ON a.manager_id=b.employee_id;
                    
--OR
SELECT a.employee_id, a.first_name, a.manager_id, b.first_name
FROM employees a , employees b
WHERE a.manager_id=b.employee_id; --106명

--manger 가 없는 사람? 
SELECT *FROM employees WHERE manager_id IS NULL;

-- manager가 없는 사람도 포함해서 출력 ->OUTER JOIN 이용
SELECT a.employee_id, a.first_name, a.manager_id, b.first_name
FROM employees a, employees b
WHERE a.manager_id=b.employee_id(+); -- employee_id가 있는 쪽에 (+)를 붙이자! 


-------------
--AGGREGATION
--여러 행을 입력으로 데이터를 집계하여 하나의 행으로 변환 

--1) count (): 갯수 새기
--  employees 테이블에 몇개의 레코드가 있나?

--*로 카운트시, -> 모든 레코드의 수
SELECT COUNT(*) FROM employees; --107

--컬럼 명시 -> null 값은 집계에서 제외 
SELECT COUNT(commission_pct) FROM employees; --35명 
--아래 쿼리와 동일 
SELECT COUNT (*) FROM employees
WHERE commission_pct IS NOT NULL;

--2) 합계: SUM ( )
--사원들 급여의 총합
SELECT SUM(salary) FROM employees;

--3) 평균: AVG( )
--사원들 급여의 평균
SELECT AVG(salary) FROM employees;

--집계함수는 null을 집계에서 제외 (필드 명시 시!) 
--사원들이 맏는 커미션 비율의 평균치?
SELECT AVG(commission_pct) FROM employees; -- 22%
-- > 전체 사원이 받는 커미션 비율의 평균치가 아닌, 커미션을 받는 사원들의 평균치가 산술됨 
--null값을 0으로 산출해서 다시 통계를 잡아보자
SELECT AVG(NVL(commission_pct,0)) FROM employees; --7%
--> 전체사원이 받는 커미션 비율의 평균치는 7%에 불과
-- DESHALB, 집계함수 수행시 null (결속치) 값을 처리할 방식을 정책으로 결정하고 수행해야 함 

--연습문제
--사원들이 받는 급여의 최소값, 최대값, 평균, 중앙값을 
SELECT MIN(salary), MAX(salary), AVG(salary), MEDIAN(salary) 
FROM employees;

--흔히 범하는 오류 #1
--e.g. 부서 아이디에 따른 평균 구하기 
--SELECT department_id, AVG(salary) FROM employees; 
--> department_id는 단일 레코드로 집계되지 않으므로 ERROR(!)
--> AVG는 집계함수 이므로 표현할 수 없음 (한개의 값만 표현할 수 있으므로) 
--그룹별 집계를 위해서는 GROUP BY 절을 이용해야 함 
--DESHALB, 아래와 같이 표현해야 함
SELECT department_id, salary FROM employees
ORDER BY department_id;

SELECT department_id, ROUND(AVG(salary),2) "Average Salary" FROM employees 
GROUP BY department_id
ORDER BY department_id;

--흔히 범하는 오류 #2
--e.g.부서별 급여에 부서명도 함께 출력하기
--집계 함수를 사용한 쿼리문의 SELECT 컬럼 목록에는 
--GROUPING에 참여한 필드나 집계함수만 출력할 수 있음
--SELECT department_id, department_name, AVG(salary) FROM employees 
--GROUP BY department_id ORDER BY department_id;
--부서번호에 따라 부서명은 하나로 결정 될 수 있지만, 
--부서 명은 grouping에 참여하지 않았으므로, 하나의 행으로 집계되었다고 볼수 없음 
--GROUPING에 참여한 필드나 집계함수만 출력할 수 있음 
--HAVING, ORDER BY도 마찬가지 

--흔히 범하는 오류 #3
--cf. HAVING 절 
--e.g. 평균월급이 7000이상인 부서는?
--SELECT department_id, AVG(salary) FROM employees 
--WHERE AVG(salary)>=7000 GROUP BY department_id;
--b/c 쿼리 실행 시, WHERE절 먼저 실행됨 =WHERE절 실행 시,
--GROUP BY 집계가 일어나기 이전에 조건을 체크하므로 AVG(salary)가 존재하지 않음
--DESHALB: aggreagation 이전> WHERE; aggregation 이후> HAVING
SELECT department_id, AVG(salary) FROM employees
GROUP BY department_id
HAVING AVG(salary) >= 7000 --집계 이후의 조건을 검사
ORDER BY department_id;

--연습문제
--급여 합계가 20000 이상인 부서의 부서 번호와 인원 수, 급여 합계를 출력
--SELECT department_id, COUNT(*), SUM(salary) FROM employees 
--WHERE SUM(salary)>20000 GROUP BY department_id; 의 문제점 
SELECT department_id, COUNT(*), SUM(salary) FROM employees
GROUP BY department_id HAVING SUM(salary) >20000
ORDER BY department_id;


--분석함수
--ROLL UP: GROUP BY절과 함계 사용
--grouping한 결과에 대한 좀 더 상세한 요약을 제공
-- ITEM Total 기능 수행 
SELECT department_id, job_id, sum(salary) FROM employees
GROUP BY department_id, job_id
ORDER BY department_id, job_id;

SELECT department_id, job_id, sum(salary) FROM employees 
GROUP BY ROLLUP(department_id, job_id)
ORDER BY department_id;

--CUBE: cross-table에 의한 summary를 함께 추출
--ROLLUP 함수에 의해 제공되는 item total + column total 값을 함께 제공함 
SELECT department_id, job_id, sum(salary) FROM employees
GROUP BY CUBE(department_id, job_id)
ORDER BY department_id;


--SUBQUERY
--하나의 SQL 내부에서 다른 SQL을 포함하는 형태
--임시로 테이블을 구성, 임시 결과를 바탕으로 최종 쿼리를 수정
--e.g.  사원들의 급여 중앙값 보다 많은 급여를 받는 직원?
--급여의 중간값?
SELECT MEDIAN(salary) FROM employees; --6200
--> 중앙값보다 많이 받는 직원 추출 쿼리
SELECT first_name, salary FROM employees
WHERE salary > 6200
ORDER BY salary DESC;
-- 두개의 쿼리를 합치면 
SELECT first_name, salary FROM employees 
WHERE salary > (SELECT MEDIAN(salary) FROM employees)
ORDER BY salary DESC;

--사원 중, Susan 보다 늦게 입사한 사원의 명단
SELECT first_name, hire_date FROM employees;
--1) 이름이 수잔인 사람의 입사일을 추출
SELECT hire_date FROM employees 
WHERE first_name='Susan';
--2) 입사일이 특정일자보다 나중인 사원을 추출
SELECT first_name, hire_date FROM employees 
WHERE hire_date> '02/06/07';
--3) 두 쿼리 합치기
SELECT first_name, hire_date FROM employees 
WHERE hire_date> (SELECT hire_date FROM employees WHERE first_name = 'Susan');

--단일행 서브 쿼리 (Single-row Subquery)
-- 서브 쿼리의 결과가 단일 행인 경우
--단일 행 연산자: =. >, <, <=, >=

--연습문제
--급여를 가장 적게 받는 사람의 이름, 급여, 사원 번호를 출력 
SELECT first_name, salary, employee_id FROM employees
WHERE salary =(SELECT MIN(salary) FROM employees);
--평균 급여보다 적게 받는 사원의 이름, 급여
SELECT first_name, salary FROM employees
WHERE salary < (SELECT AVG(salary) FROM employees)
ORDER BY salary DESC;

--다중행 서브쿼리 (=multi-row subquery)
--서브쿼리의 결과 레코드가 둘 이상인 것 --> 단순 비교 연산자 수행 불가
-- 집한 연산에 관련된 IN, ANY, ALL, EXIST 등을 이용
--ALL과 ANY는 비교연산자 (>,<) 와 함께 사용됨 

SELECT salary FROM employees WHERE department_id=110; --12008, 8300

--IN
SELECT salary FROM employees 
WHERE salary IN (SELECT salary FROM employees WHERE department_id=110);
--> 12008, 8300과 같은 값을 가지는 사람을 출력 
--ALL
SELECT salary FROM employees 
WHERE salary > ALL (SELECT salary FROM employees WHERE department_id=110);
--> 12008과 8300보다 높은 값을 가지는 사람을 출력  (=12008보다 높은 값)
--ANY 
SELECT salary FROM employees 
WHERE salary > ANY (SELECT salary FROM employees WHERE department_id=110);
--> 12008 혹은 8300 보다 높은 값을 가지는 사람을 출력 (=8300보다 높은값)

--Correlated Query
--Outer Query와 Inner Query가 서로 연관되어 있는 쿼리
SELECT first_name, salary, department_id 
FROM employees outer 
WHERE salary > (SELECT AVG(salary) FROM employees 
                WHERE department_id = outer.department_id);
--> 사원목록을 뽑아 오는데, 자신이 속한 부서의 평균 급여보다 많이 받는 직원을 뽑아오자

--연습문제
--각 부서별로 최고 급여를 받는 사원을 출력 (4가지 방법) 
--1)서브쿼리 
SELECT department_id, employee_id, first_name, salary FROM employees 
WHERE (department_id, salary) IN 
(SELECT department_id, MAX(salary) FROM employees GROUP BY department_id)
ORDER BY department_id;
--2)테이블 조인 
SELECT e.department_id, e.employee_id, e.first_name, e.salary FROM employees e,
(SELECT department_id, Max(salary) salary FROM employees GROUP BY department_id) s
WHERE e.department_id=s.department_id AND e.salary=s.salary
ORDER BY department_id;